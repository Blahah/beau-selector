// Generated by CoffeeScript 1.10.0
(function() {
  var CSS_LIBS, XPATH_LIBS, absPath, domParse, elToString, executeCSSQuery, executeXPath, fetchHTML, fs, jsdom, log, path, useXPath;

  fs = require('fs');

  path = require('path');

  log = require('verbalize');

  jsdom = require('jsdom');

  path = require('path');

  'use strict';

  absPath = function(relPath) {
    return path.resolve(__dirname, relPath);
  };

  XPATH_LIBS = [absPath('wgxpath.install.js')];

  CSS_LIBS = [absPath('qwery.min.js', 'qwery-pseudos.min.js')];

  useXPath = function(query) {
    return query.indexOf('/') === 0;
  };

  fetchHTML = function(url, cb) {
    return request.get(url, function(err, response, body) {
      if (err != null) {
        return cb(err, response, body);
      }
      return cb(err, response, body);
    });
  };

  domParse = function(html, libs, cb) {
    var opts;
    opts = {
      html: html,
      scripts: libs,
      parsingMode: 'xml',
      done: function(err, window) {
        if (err != null) {
          return cb(err, window);
        }
        return cb(err, window);
      }
    };
    return jsdom.env(opts);
  };

  elToString = function(el, attribute, outer) {
    var ret;
    ret = '';
    if (attribute) {
      ret = el.getAttribute(attribute);
    } else if (outer && (el.outerHTML != null)) {
      ret = el.outerHTML.trim();
    } else if (el.innerHTML != null) {
      ret = el.innerHTML.trim();
    } else if (el.textContent != null) {
      ret = el.textContent.trim();
    } else if (Object.prototype.toString.call(el) === '[object String]') {
      ret = el.trim();
    }
    return ret.replace(/\r?\n|\r/g, ' ');
  };

  executeXPath = function(query, window) {
    var document, els, i, len, result;
    if (window.wgxpath == null) {
      return [];
    }
    window.wgxpath.install();
    document = window.document;
    els = [];
    result = document.evaluate(query, document, null, 7, null);
    len = result.snapshotLength;
    if (len > 0) {
      els = (function() {
        var j, ref, results1;
        results1 = [];
        for (i = j = 0, ref = len; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
          results1.push(result.snapshotItem(i));
        }
        return results1;
      })();
    }
    return els;
  };

  executeCSSQuery = function(query, window) {
    var els;
    if (window.qwery == null) {
      return [];
    }
    els = window.qwery(query);
    return els;
  };

  module.exports = function(xml, opts, cb) {
    var attribute, doc, libs, outer, query, xpath;
    query = opts.query;
    attribute = opts.attribute;
    outer = opts.outer;
    doc = xml;
    xpath = useXPath(query);
    libs = CSS_LIBS;
    if (xpath) {
      libs = XPATH_LIBS;
    }
    return domParse(doc, libs, function(err, window) {
      var j, len1, result, results, strings;
      if (err != null) {
        cb(err);
      }
      if (xpath) {
        results = executeXPath(query, window);
      } else {
        results = executeCSSQuery(query, window);
      }
      if (!results || results.length < 1) {
        cb(null, []);
      }
      strings = [];
      for (j = 0, len1 = results.length; j < len1; j++) {
        result = results[j];
        strings.push(elToString(result, attribute, outer));
      }
      return cb(null, strings);
    });
  };

}).call(this);
